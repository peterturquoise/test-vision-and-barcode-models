# C++ ZXing in-memory worker (no Boost dependency)
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    curl \
    pkg-config \
    libopencv-dev \
    python3-opencv \
    && rm -rf /var/lib/apt/lists/*

# Install ZXing-CPP (standalone, no Boost)
RUN git clone --depth 1 https://github.com/nu-book/zxing-cpp.git /tmp/zxing-cpp && \
    cd /tmp/zxing-cpp && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DBUILD_EXAMPLES=ON -DBUILD_BENCHMARKS=OFF && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && \
    rm -rf /tmp/zxing-cpp

# Install Go
RUN curl -L https://go.dev/dl/go1.21.0.linux-amd64.tar.gz -o go.tar.gz && \
    tar -C /usr/local -xzf go.tar.gz && \
    rm go.tar.gz

ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/go"
ENV GOCACHE="/go/cache"
ENV CGO_ENABLED=1

WORKDIR /app

# Copy Go source files
COPY cpp_memory_worker.go ./
COPY test_image.jpeg ./

# Initialize Go module and install dependencies
RUN go mod init cpp-memory-worker
RUN go get github.com/streadway/amqp

# Build the Go application
RUN go build -o cpp_memory_worker cpp_memory_worker.go

# Create app user
RUN useradd -m -s /bin/bash appuser
RUN chown -R appuser:appuser /app

USER appuser

# Command to run the application
CMD ["./cpp_memory_worker"]